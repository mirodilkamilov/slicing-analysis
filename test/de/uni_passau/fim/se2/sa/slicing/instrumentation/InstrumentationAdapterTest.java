package de.uni_passau.fim.se2.sa.slicing.instrumentation;

import org.junit.jupiter.api.Test;
import org.objectweb.asm.*;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class InstrumentationAdapterTest {
    @Test
    void testInstrumentationAdapter_ShouldInjectCorrectMethodCall() {
        ClassWriter cw = new ClassWriter(0);
        InstrumentationAdapter adapter = new InstrumentationAdapter(Opcodes.ASM9, cw);

        MethodVisitor mv = adapter.visitMethod(Opcodes.ACC_PUBLIC, "dummyMethod", "()V", null, null);

        mv.visitCode();
        Label label = new Label();
        mv.visitLabel(label);
        mv.visitLineNumber(123, label); // This should trigger instrumentation
        mv.visitInsn(Opcodes.RETURN);
        mv.visitMaxs(0, 0);
        mv.visitEnd();

        byte[] bytecode = cw.toByteArray();

        // Now inspect the generated bytecode for the injected method call
        ClassReader reader = new ClassReader(bytecode);
        reader.accept(new ClassVisitor(Opcodes.ASM9) {
            @Override
            public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
                return new MethodVisitor(Opcodes.ASM9) {
                    @Override
                    public void visitMethodInsn(int opcode, String owner, String methodName, String methodDesc, boolean isInterface) {
                        if (methodName.equals("trackLineVisit")) {
                            assertEquals("de/uni_passau/fim/se2/sa/slicing/coverage/CoverageTracker", owner);
                            assertEquals("(I)V", methodDesc);
                        }
                    }
                };
            }
        }, 0);
    }

}
